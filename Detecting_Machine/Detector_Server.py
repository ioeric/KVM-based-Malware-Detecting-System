import SocketServer
import socket
import signal
import threading
import os
import re
import subprocess
import json

Detector = 'Detector'
class Detector_SocketHandler(SocketServer.BaseRequestHandler):
    def setup(self):
        #SocketServer.BaseRequestHandler.__init__(self)
        self.dic = {}

    def parse(self,data):
        pattern = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+);(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(\d+);(\w+)'
        regex = re.compile(pattern)
        m = regex.match(data)
        if m:
            self.dic['src_ip'] = m.groups()[0]
            self.dic['src_port'] = m.groups()[1]
            self.dic['dst_port'] = m.groups()[2]
            self.dic['dst_port'] = m.groups()[3]
            self.dic['filename'] = m.groups()[4]
        else:
            print 'Can\'t match: %s' %data
    def detect(self):
        p = subprocess.Popen([ Detector, './'+self.dic['filename'] ], stdout = subprocess.PIPE)
        out, err = p.communicate()
        if err:
            print '[Detector]Output: %s\n[Error]%s' %(out, err)
            print '[Detector]: ERROR when detecting %s' %self.dic['filename']
        else:
            return out

    def handle(self):
        data = self.request.recv(1024)
        if self.parse(data) is not False:
            
            self.dic['result'] = self.detect()
            if res:
                s = socket.socket(AF_INET, SOCK_STREAM)
                s.connect( (DVM_host_ip, DVM_host_port) )
                print 'Sent result to HOST: %s' %res
                msg = json.dumps(self.dic)
                s.send(msg)
                s.close()
            else:
                print 'Detect result false![DATA]:%s' %data
            
            print self.dic
            print "Thread - ", threading.current_thread()
        else:
            print 'Parsing fault: %s' %data

class Detector_Threaded_Server(SocketServer.ThreadingMixIn, SocketServer.UnixStreamServer):
    pass

if __name__ == '__main__':
    print 'Create socket file in ./UN_SOCK_FILE'
    
    server_address = './UN_SOCK_FILE'

    try:
        print 'Unlinking %s' %server_address
        os.unlink(server_address)
    except OSError:
        if os.path.exists(server_address):
            print 'File %s exists...' %server_address
            raise

    server = Detector_Threaded_Server(server_address, Detector_SocketHandler)
    t = threading.Thread(target = server.serve_forever)
    t.setDaemon(True)
    t.start()
    print 'Server runs on %s' %t.getName()
    def finalize(signum, fram):
        print 'SIGIN: Closing server'
        server.server_close()
        print 'Server closed'
        os.unlink(server_address)
    signal.signal(signal.SIGINT, finalize)
    signal.pause()
    print 'Exiting...'
