import VirtualMachine
import socket
import SocketServer
import subprocess
import threading
import json

VM_dict = {}

class VM_TCP_Handler( SocketServer.BaseRequestHandler ):
    def handle(self):
        message = self.request.recv(1024)
        data = json.loads(message)
        vm_name = data['name']
        vm_config = data['config']
        
        if VM_dict.has_key(vm_name):
            response = '%s exists'
        else:
            VM_dict[ vm_name ] = VirtualMachine.VitualMachine(vm_name, vm_config)
            VM_dict[ vm_name ].create()
            vnc_address = VM_dict[ vm_name ].start()
            response = '%s: (%s, %s)' %(vm_name, vnc_address)
        
        self.request.sendall(response)

class VM_Monitor_Server( SocketServer.ThreadingMixIn, SocketServer.TCPServer ):
    pass


def sent_to_host(host_ip, host_port, ip, port):
    sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM )
    sock.connect(host_ip, host_port)
    data = {'message':'New Server', 'ip':ip, 'port':port}
    msg = json.dumps(data)
    try:
        sock.sendall(msg)
        response = sock.recv(1024)
        ###check reponse in the future###
    finally:
        sock.close()

if __name__ == '__main__':
    HOST, PORT = 'localhost', 98989
    server = VM_Monitor_Server( (HOST, PORT), VM_TCP_Handler)
    server_ip, server_port = server.server_address
    send_to_host(host_ip, host_port, server_ip, server_port) # Tell host new server started
    server_thread = threading.Thread(target=server.serve_forever)
    server_thread.daemon = True
    server_thread.start()

