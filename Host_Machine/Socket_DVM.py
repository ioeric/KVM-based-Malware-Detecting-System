import SocketServer
import threading 
import socket
import json
import signal

ResultPool = {}
DVM_NUMBER = 1
class Result():
    def __init__(self, data):
        self.dic = {}
        self.res = []
        self.dic['ID'] = data['ID'] 
        self.dic['gvm_ip'] = data['dst_ip']
        self.dic['gvm_port'] = data['dst_port']
        self.dic['src_ip'] = data['src_ip']
        self.dic['src_port'] = data['src_port']
    def AddResult(self,dvm,result):
        self.res.append( (dvm,result) )
        if self.res.count >= DVM_NUMBER:
            level = 0
            for vm,result in self.res:
                level += int(result)
                self.dic['level'] = level
            return True
        else:
            return False
    def GetFinalResult(self):

class DVM_SocketHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        msg = self.request.recv(1024)
        data = json.loads(msg)
        if ResultPool.has_key(data['ID']):
            res = ResultPool[ data['ID'] ]

            if res.AddResult( data['DVM'], data['result'] ) is True:
                self.request.sendall( json.dumps( res.dic ) )
                ResultPool.pop(data['ID'])
                res = None
               
        else:
            ResultPool[data['ID']] = Result(data)
            ResultPool[data['ID']].AddResult(data['DVM'],data['result'])
            

class DVM_ThreadedSocketServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass

if __name == '__main__':
    address = ('localhost',0)
    server = DVM_ThreadedSocketServer(adress, DVM_SocketHandler)
    def finalize():
        print '[DVM_Socket_Server]Closing'
        #server.socket.close()
        server.server_close()
        print '[DVM_Socket_Server]Closed'
    
    signal.signal(signal.SIGINT, finalize)
    ip, port = server.server_address
    print '[DVM_Socket_Server]Listening on %s:%s' %(ip, port)
    t = threading.Thread(target = server.serve_forever)
    t.setDaemon(True)
    t.start()
    print 'Server runs on %s' %t.getName()
    signal.pause()
