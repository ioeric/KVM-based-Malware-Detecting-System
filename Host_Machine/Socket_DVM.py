import SocketServer
import threading 
import socket
import json
import signal
from copy import deepcopy
ResultPool = {}
DVM_NUMBER = 1

gvm_port_map = {
            '192.168.2.10':20001,
        }


class Result():
    
    def __init__(self, data):
        self.dic = {}
        self.res = []
        self.dic = deepcopy(data)

    def AddResult(self,dvm,result):
        print '[AddResult]Adding result DVM: ', dvm, ' Result: ', result
        self.res.append( (dvm,result) )
        if self.res.count >= DVM_NUMBER:
            level = 0 
            for vm,result in self.res:
                level += int(result)
            self.dic['level'] = level
            return True
        else:
            return False


class DVM_SocketHandler(SocketServer.BaseRequestHandler):
    
    def handle(self):
        msg = self.request.recv(1024)
        data = json.loads(msg)
        if ResultPool.has_key(data['ID']):
            res = ResultPool[ data['ID'] ]
            print 'Get new data for existing result: ', res
            print 'Data is: ', data
            if res.AddResult( data['DVM'], data['result'] ) is True:
                """
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect( ( res['dst_ip'], gvm_port_map[ res['dst_ip'] ] ) )
                s.sendall( json.dumps( res.dic ) )
                """
                print 'Got final result: ',res.dic
                ResultPool.pop( data['ID'] )
                res = None
        else:
            print 'Establish new result with data: ', data
            ResultPool[data['ID']] = Result(data)
            ResultPool[data['ID']].AddResult(data['DVM'],data['result'])
            print 'Get new result: ', ResultPool[data['ID']]


class DVM_ThreadedSocketServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass

if __name__ == '__main__':
    address = ('192.168.2.2',1992)
    server = DVM_ThreadedSocketServer(address, DVM_SocketHandler)
    def finalize(sinal, fram):
        print '[DVM_Socket_Server]Closing'
        #server.socket.close()
        server.server_close()
        print '[DVM_Socket_Server]Closed'
    
    signal.signal(signal.SIGINT, finalize)
    ip, port = server.server_address
    print '[DVM_Socket_Server]Listening on %s:%s' %(ip, port)
    t = threading.Thread(target = server.serve_forever)
    t.setDaemon(True)
    t.start()
    print 'Server runs on %s' %t.getName()
    signal.pause()
