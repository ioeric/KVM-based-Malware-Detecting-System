import signal
import subprocess 
import ConfigParser
import os
from subprocess import Popen
import pdb
configFile = 'host.cfg'

class Monitor():
    def __init__(self, cfgFile):
        config = ConfigParser.RawConfigParser()
        config.read(cfgFile)
        self.br_name = config.get('Sniffer','br_name')
        self.if_name = config.get('Sniffer','if_name') 
        self.filter_str = config.get('Sniffer', 'filter_file')
        self.sniffer = None

    def CreateBridge(self):
        if subprocess.call(['ifconfig',self.br_name]) == 0:
            print 'Birdge '+self.br_name+' already exists'     
        else: 
            if subprocess.call(['brctl','addbr',self.br_name])!=0:
                print 'Cannot created bridge: '+self.br_name
                exit(1)
            print 'Successfully created bridge: '+self.br_name
        if subprocess.call(['ip','link','set',self.br_name,'up']) == 0:
            print "Set bridge up.."
            return
        else:
            print 'Cannnot set bridge up'
            subprocess.call(['brctl','delbr',self.br_name])
            exit(2)
            
    def Run(self):
        if self.sniffer is not None:
            return
        else:
            if self.filter_str:
                self.sniffer = Popen(['./sniffer',self.if_name,self.br_name,self.filter_str])
            else:
                self.sniffer = Popen(['./sniffer', self.if_name, self.br_name])
        self.sniffer.wait()

    def clear(self):
        if self.sniffer is None:
            return
        print 'delete!'
        subprocess.call(['ip', 'link', 'set', self.br_name,'down'])
        subprocess.call(['brctl', 'delbr', self.br_name])
        return
            
if __name__ == '__main__':
    if os.getuid() != 0:
        print "Permission Denied!"
        exit(1);

    monitor = Monitor(configFile)
    pid = -1
    def finalize(signum, fram):
        monitor.clear()
        print 'Interupted!'
        exit(10)

    signal.signal(signal.SIGINT, finalize)
    monitor.CreateBridge()
    monitor.Run()
    signal.pause()
